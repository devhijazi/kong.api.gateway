version: "3.8"

volumes:
  kong_data: {}

networks:
  kong-network:
    driver: bridge
    external: true

services:
  kongdb:
    image: postgres:9.5
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - kong-network

  kong-migrations:
    image: kong:3.9.1
    command: kong migrations bootstrap
    depends_on:
      kongdb:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: kongdb
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - kong-network
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong-migrations-up:
    image: kong:3.9.1
    command: >
      /bin/sh -c "kong migrations up && kong migrations finish"
    depends_on:
      kongdb:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: kongdb
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - kong-network
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong:
    image: kong:3.9.1
    user: "kong"
    depends_on:
      kong-migrations-up:
        condition: service_completed_successfully
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: kongdb
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PLUGINS: bundled
    networks:
      - kong-network
    ports:
      - "8080:8000" ## trocar para 8000:8000 em prod
      - "127.0.0.1:8001:8001/tcp"
      - "9444:8443" ## trocar para 8443:8443 em prod
      - "127.0.0.1:8444:8444/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - ./kong/plugins/request-transform/handler.lua:/usr/local/share/lua/5.1/kong/plugins/request-transform/handler.lua
      - ./kong/plugins/request-transform/schema.lua:/usr/local/share/lua/5.1/kong/plugins/request-transform/schema.lua
      - ./kong/plugins/request-transform/redis.lua:/usr/local/openresty/site/lualib/redis.lua
    extra_hosts:
      - "host.docker.internal:host-gateway"

  konga-prepare:
    image: pantsel/konga:latest
    command: "-c prepare -a postgres -u postgresql://kong:kong@kongdb:5432/konga_db"
    depends_on:
      kongdb:
        condition: service_healthy
    networks:
      - kong-network
    restart: "no"

  konga:
    image: pantsel/konga:latest
    environment:
      NODE_ENV: production
      DB_ADAPTER: postgres
      DB_HOST: kongdb
      DB_PORT: 5432
      DB_USER: kong
      DB_PASSWORD: kong
      DB_DATABASE: konga_db
      TOKEN_SECRET: ahfdjgjgf79JKLFHJKh978953kgdfjkl
    depends_on:
      kongdb:
        condition: service_healthy
      konga-prepare:
        condition: service_completed_successfully
    networks:
      - kong-network
    ports:
      - "1337:1337"
    restart: always
